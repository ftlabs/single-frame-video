<h1>Create a single-frame video</h1>
<p>Drag and drop an .mp3 file onto the left box and a single image file onto the right box and then click upload to create a single frame video</p>

<form method="POST" action="/create" id="uploadForm">

	<div id="audioDrop" class="dropzone" data-filetype="audio">
		<p class="filename">Drop audio file here</p>
	</div>
	<div id="imageDrop" class="dropzone" data-filetype="image">
		<p class="filename">Drop image file here</p>
	</div>
	
	<div id="metadata">
		<h3>Add metadata</h3>
		<span id="count">Characters remaining:<a>255</a></span>
		<div class="fields">
			<div class="item">
				<input type="text" placeholder="Key" />&nbsp;=&nbsp;<input type="text" placeholder="Value" />
			</div>
		</div>
		<span class="o-buttons" id="extraField">Add field</span>
	</div>

	<button class="o-buttons" id="uploadBtn" data-visible="false">Upload</button>

</form>

<div id="progressOverlay" class="overlay" data-visible="false">

	<div class="info">
		<h3>Uploading files...</h3>
		<div id="bar"></div>
	</div>

</div>

<div id="jobStatusOverlay" class="overlay" data-visible="false">

	<div class="info">
		<h3>Processing</h3>
		<div id="status"></div>
	</div>

</div>

<div id="downloadOverlay" class="overlay" data-visible="false">

	<div class="info">
		<div class="close">x</div>
		<h3>Download Video</h3>
		<p>This link will be valid for 30 minutes</p>
		<a href="">video file</a>
	</div>

</div>

<div id="alertOverlay" class="overlay" data-visible="false">
	<div class="info">
	<div class="close">x</div>
		<h3>Sorry</h3>
		<p></p>	
	</div>

</div>

<script>

	function prevent(event){
		event.preventDefault();
		event.stopPropagation();
	}

	window.addEventListener("dragover",function(e){
		prevent(e);
		document.body.dataset.dragging = "true";
	},false);

	window.addEventListener("drop",function(e){
		prevent(e);
		document.body.dataset.dragging = "false";
	},false);

	window.addEventListener('dragleave', function(e){
		prevent(e);		
		document.body.dataset.dragging = "false";
	}, false);

	document.querySelector('#uploadForm').addEventListener('submit', function(e){
		prevent(e);

		createFormForUpload();
		
		if(formData !== undefined){
			uploadFormToServer();
		}

	}, false);

	var overlay = {
		progress : document.querySelector('#progressOverlay'),
		jobStatus : document.querySelector('#jobStatusOverlay'),
		download : document.querySelector('#downloadOverlay'),
		alert : document.querySelector('#alertOverlay')
	};

	var droppedFiles = {
		audio : undefined,
		image : undefined
	}

	var audioDropZone = document.querySelector('#audioDrop');
	var imageDropZone = document.querySelector('#imageDrop');

	var formData = undefined;

	var jobStatus = undefined;

	document.querySelector('#extraField').addEventListener('click', function(){

		var newPairFrag = document.createDocumentFragment();
		var itemHolder = document.createElement('div');
		var eq = document.createTextNode(" = ");
		var i1 = document.createElement('input');
		var i2 = document.createElement('input');

		itemHolder.setAttribute('class', 'item');

		i1.setAttribute('type', 'text');
		i2.setAttribute('type', 'text');

		i1.setAttribute('placeholder', 'Key');
		i2.setAttribute('placeholder', 'Value');

		itemHolder.appendChild(i1);
		itemHolder.appendChild(eq);
		itemHolder.appendChild(i2);

		document.querySelector('#uploadForm #metadata .fields').appendChild(itemHolder);

	}, false);

	function prepareMetadataForTransfer(inputs){
		var content = "";
		for(var x = 0; x < inputs.length; x += 2){
			content += encodeURIComponent(inputs[x].value) + "=" + encodeURIComponent(inputs[x + 1].value) + ",";
		}

		if(content === "=,"){
			return "";
		} else {
			return content;
		}

	}

	document.querySelector('#metadata').addEventListener('keyup', function(){
		
		var allInputFields = this.querySelectorAll('.fields input[type="text"]');
		var encodedText = prepareMetadataForTransfer(allInputFields)

		this.querySelector('#count a').textContent = 255 - encodedText.length;

	}, false);

	document.querySelectorAll('.close').forEach(function(closeBtn){

		closeBtn.addEventListener('click', function(){

			var element = this;

			while(element !== document){
				console.log(element);
				if(element.getAttribute('class').indexOf('overlay') > -1){
					element.dataset.visible = "false";
					break;
				} else {
					element = element.parentNode;
				}
			}

		}, false);

	});

	function checkFileIsAllowed(file, type, callback){

		console.log("Checking file is allowed:", file);

		var reader = new FileReader();

		reader.onload = function(f){

			switch(type){
				case "image":

					var tmpImage = new Image();
					tmpImage.onload = function(){
					
						console.log(this.width, this.height);
						var maxDimension = 600;
					
						if(this.width <= maxDimension && this.height <= maxDimension){
							callback(true);
						} else {
							callback(false, "The image cannot be wider or taller than " + maxDimension + " pixels");
						}

					}

					tmpImage.src = f.target.result;

					break;
				case "audio":
		
					var tmpAudio = new Audio();
		
					tmpAudio.oncanplay = function(){
						console.log(this.duration);
						var maxMinutes = 7
						if(this.duration <= maxMinutes * 60){
							callback(true);
						} else {
							callback(false, "The .mp3 file can't be longer than " + maxMinutes + " minutes long");
						}
					}

					tmpAudio.src = f.target.result;

					break;
				default:
					cb(false);
			}	

		};

		reader.readAsDataURL(file);

	}

	function checkJobStatus(id){

		fetch('/check/' + id)
			.then(function(res){
				return res.text();
			})
			.then(function(status){
				console.log(status);

				var infoBox = overlay.jobStatus.querySelector('#status');

				if(status === "waiting"){
					infoBox.textContent = "Job status: In queue";
				} else if(status === "running"){
					infoBox.textContent = "Job status: Converting to video...";				
				} else if(status === "finished"){
					clearInterval(jobStatus);
					infoBox.textContent = "Job status: Finished. Getting link...";

					overlay.jobStatus.dataset.visible = "false"
					
					overlay.download.querySelector('a').setAttribute('href', '/download/' + id);
					overlay.download.dataset.visible = "true";

				}

			})
		;

	}

	function uploadFormToServer(){
		var oReq = new XMLHttpRequest();

		oReq.upload.addEventListener('progress', function(evt){
			
			var percentUploaded = (evt.loaded / evt.total) * 100;
			overlay.progress.querySelector('#bar').style.width = percentUploaded + "%";

		}, false);

		oReq.open("POST", "/create", true);
		
		oReq.onload = function(oEvent) {

			if (oReq.status == 200) {
				
				var id = oReq.responseText;

				console.log("Upload successful");
				overlay.progress.dataset.visible = "false";

				(function(jobID){
					
					jobStatus = setInterval(function(){
						checkJobStatus(jobID);
					}, 5000);

				})(id);

				overlay.jobStatus.dataset.visible = "true";

			} else {

				console.error("Upload failed");
				console.error(oReq);

			}

		};

		oReq.send(formData);
		document.querySelector('#uploadForm #uploadBtn').dataset.visible = "false";
		
		overlay.progress.querySelector('#bar').style.width = "0%";
		overlay.progress.dataset.visible = "true";

	}

	function createFormForUpload(){
		formData = new FormData();

		for(item in droppedFiles){
			formData.append('file', droppedFiles[item]);
		}

		formData.append('metadata', prepareMetadataForTransfer(document.querySelectorAll('#metadata .fields input[type="text"]')) ); 
	}

	function handleDroppedFile(event, expectedFileType){

		var droppedFile = event.dataTransfer.files[0];
		console.log(droppedFile);
		console.log(droppedFile.type);

		if(expectedFileType === "image"){
		
			if(droppedFile.type !== "image/jpeg" && droppedFile.type !== "image/png"){
				return false;
			}
		
		} else if(expectedFileType === "audio"){
		
			if(droppedFile.type !== "audio/mp3" && droppedFile.type !== "audio/mpeg"){
				return false;
			}
		
		}

		checkFileIsAllowed(droppedFile, expectedFileType, function(allowed, reason){

			if(allowed){

				droppedFiles[expectedFileType] = droppedFile;

				var dZ = document.querySelector('.dropzone[data-filetype="' + expectedFileType + '"]');
				dZ.querySelector('p').innerText = droppedFile.name;
				console.log(dZ);

				var allInputsMatched = true;

				for(key in droppedFiles){
					if(droppedFiles[key] === undefined){
						allInputsMatched = false;
						break;
					}
				}

				if(allInputsMatched){
					document.querySelector('#uploadForm #uploadBtn').dataset.visible="true";
				}

				console.log(allInputsMatched);

			} else {

				overlay.alert.dataset.visible = "true";
				overlay.alert.querySelector('p').textContent = reason;

			}

		});

	}

	Array.from(document.querySelectorAll('.dropzone')).forEach(function(dropZone){

		console.log(dropZone);
		dropZone.addEventListener('drop', function(e){
			// console.log(this.dataset.filetype);
			handleDroppedFile(e, this.dataset.filetype);

		}, false);

	});

</script>